//------------------------------------------------------------------------------
// CacheProvider version: 2012.2.0.534
//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.5448
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace User {
    
    
    /// <summary>
    /// ADBK from DASL definition
    /// </summary>
    public partial class ADBK : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "User.ADBK";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 20841;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(41);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(2);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(10);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static ADBK() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("User.ADBK", typeof(ADBK));
            ;
            User.ADBK.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("AAGE", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 35645));
            User.ADBK.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("ABTHDAY", InterSystems.Data.CacheTypes.ClientTypeId.tDate, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 49942));
            User.ADBK.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("ACITY", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            User.ADBK.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("ANAME", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            User.ADBK.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("APHHOME", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            User.ADBK.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("APHOTH1", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            User.ADBK.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("APHWORK", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            User.ADBK.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("ASTATE", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            User.ADBK.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("ASTREET", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            User.ADBK.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("AZIP", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            ;
            User.ADBK.CheckSumMethodDict.Add("%ComposeOid", 25785);
            User.ADBK.CheckSumMethodDict.Add("%DeleteExtent", 56782);
            User.ADBK.CheckSumMethodDict.Add("%IsA", 40977);
            User.ADBK.CheckSumMethodDict.Add("%SaveIndices", 30436);
            User.ADBK.CheckSumMethodDict.Add("AAGEDisplayToLogical", 20538);
            User.ADBK.CheckSumMethodDict.Add("AAGEIsValid", 4756);
            User.ADBK.CheckSumMethodDict.Add("AAGELogicalToDisplay", 26184);
            User.ADBK.CheckSumMethodDict.Add("ABTHDAYDisplayToLogical", 15751);
            User.ADBK.CheckSumMethodDict.Add("ABTHDAYIsValid", 4756);
            User.ADBK.CheckSumMethodDict.Add("ABTHDAYLogicalToDisplay", 21196);
            User.ADBK.CheckSumMethodDict.Add("ACITYDisplayToLogical", 59650);
            User.ADBK.CheckSumMethodDict.Add("ACITYIsValid", 4756);
            User.ADBK.CheckSumMethodDict.Add("ACITYLogicalToDisplay", 59650);
            User.ADBK.CheckSumMethodDict.Add("ANAMEDisplayToLogical", 59650);
            User.ADBK.CheckSumMethodDict.Add("ANAMEIsValid", 4756);
            User.ADBK.CheckSumMethodDict.Add("ANAMELogicalToDisplay", 59650);
            User.ADBK.CheckSumMethodDict.Add("APHHOMEDisplayToLogical", 59650);
            User.ADBK.CheckSumMethodDict.Add("APHHOMEIsValid", 4756);
            User.ADBK.CheckSumMethodDict.Add("APHHOMELogicalToDisplay", 59650);
            User.ADBK.CheckSumMethodDict.Add("APHOTH1DisplayToLogical", 59650);
            User.ADBK.CheckSumMethodDict.Add("APHOTH1IsValid", 4756);
            User.ADBK.CheckSumMethodDict.Add("APHOTH1LogicalToDisplay", 59650);
            User.ADBK.CheckSumMethodDict.Add("APHWORKDisplayToLogical", 59650);
            User.ADBK.CheckSumMethodDict.Add("APHWORKIsValid", 4756);
            User.ADBK.CheckSumMethodDict.Add("APHWORKLogicalToDisplay", 59650);
            User.ADBK.CheckSumMethodDict.Add("ASTATEDisplayToLogical", 59650);
            User.ADBK.CheckSumMethodDict.Add("ASTATEIsValid", 4756);
            User.ADBK.CheckSumMethodDict.Add("ASTATELogicalToDisplay", 59650);
            User.ADBK.CheckSumMethodDict.Add("ASTREETDisplayToLogical", 59650);
            User.ADBK.CheckSumMethodDict.Add("ASTREETIsValid", 4756);
            User.ADBK.CheckSumMethodDict.Add("ASTREETLogicalToDisplay", 59650);
            User.ADBK.CheckSumMethodDict.Add("AZIPDisplayToLogical", 59650);
            User.ADBK.CheckSumMethodDict.Add("AZIPIsValid", 4756);
            User.ADBK.CheckSumMethodDict.Add("AZIPLogicalToDisplay", 59650);
            User.ADBK.CheckSumMethodDict.Add("DeleteById", 22686);
            User.ADBK.CheckSumMethodDict.Add("File", 32598);
            User.ADBK.CheckSumMethodDict.Add("GetInstanceById", 48484);
            User.ADBK.CheckSumMethodDict.Add("IDKEYDelete", 46328);
            User.ADBK.CheckSumMethodDict.Add("IDKEYExists", 13237);
            User.ADBK.CheckSumMethodDict.Add("IDKEYOpen", 12611);
            User.ADBK.CheckSumMethodDict.Add("ListByName", 48484);
            ;
            User.ADBK.CheckSumQueryDict.Add("ByName", 33503);
            User.ADBK.CheckSumQueryDict.Add("Extent", 10141);
        }
        
        /// <summary>Internal API</summary>
        public ADBK() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public ADBK(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, User.ADBK.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public ADBK(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, User.ADBK.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property AAGE
        /// </summary>
        public virtual System.Nullable<long> AAGE {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("AAGE", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Birthday
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheDate ABTHDAY {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDate);
                        this.GetPropertyS("ABTHDAY", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDateReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, InterSystems.Data.CacheTypes.ClientTypeId.tDate, false);
                        this.SetPropertyS("ABTHDAY", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// City Name
        /// </summary>
        public virtual string ACITY {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("ACITY", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("ACITY", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// ANAME
        /// </summary>
        public virtual string ANAME {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("ANAME", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("ANAME", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Phone No. Home
        /// </summary>
        public virtual string APHHOME {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("APHHOME", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("APHHOME", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Phone No. Other
        /// </summary>
        public virtual string APHOTH1 {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("APHOTH1", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("APHOTH1", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Phone No. Working
        /// </summary>
        public virtual string APHWORK {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("APHWORK", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("APHWORK", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// State 
        /// </summary>
        public virtual string ASTATE {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("ASTATE", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("ASTATE", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Street Name
        /// </summary>
        public virtual string ASTREET {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("ASTREET", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("ASTREET", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Zip Code
        /// </summary>
        public virtual string AZIP {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("AZIP", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("AZIP", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// %ComposeOid()
        ///
        ///		This class method accepts an ID and returns a fully qualified OID, containing the most specific type class of the object identified by the
        ///		<var>id</var> argument. If default storage is used then the %%CLASSNAME value is used to determine the most specific type class, otherwise call
        ///		%OnDetermineClass to determine the most specific type class. If neither case is true then the current class is
        ///		used. If there is a problem determining the most specific type class then null ("") is returned.
        /// </summary>
        public static void SysComposeOid(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(id, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "%ComposeOid", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Delete all instances of this class from its extent. On exit <var>instancecount</var> 
        ///contains the original number of instances while <var>deletecount</var> contains 
        ///the number of instances actually deleted.
        ///
        ///<p>Internally, <METHOD>%DeleteExtent</METHOD> iterates over the set of instances in the 
        ///collection and invokes the <METHOD>%Delete</METHOD> method.
        ///
        ///Refer to <LINK href=/AboutConcurrency.html>About Concurrency</LINK> for more details 
        ///on the optional <var>concurrency</var> argument.
        ///
        ///The option <var>pInitializeExtent</var> argument allows the user to override the default behavior
        ///of calling <method>%KillExtent</method> when all instances are successfully deleted. <method>%KillExtent</method>
        ///is called by default when the extent is empty so that empty globals can be killed. If <method>%KillExtent</method>
        ///is not called then some empty globals can remain as well as the ID counter if it exists. The default value for <var>pInitializeExtent</var>
        ///is 1. Unless the caller specifies a false value for <var>pInitializeExtent</var> the globals used by the extent will be killed. In some
        ///cases, the globals used by the extent are not used exclusively by the extent. In those cases it is possible that some globals will still be defined
        ///even when pInitializeExtent is true.
        ///
        ///<p>Returns a <CLASS>%Status</CLASS> value indicating success or failure.
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteExtent(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> concurrency, ref string deletecount, ref string instancecount, System.Nullable<long> pInitializeExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(deletecount, true);
                    mtdSignature.Add(instancecount, true);
                    mtdSignature.Add(pInitializeExtent, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "%DeleteExtent", mtdSignature);
                    deletecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    instancecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Returns true (1) if instances of this class are also instances of the isclass parameter.
        ///That is 'isclass' is a primary superclass of this object.
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(isclass, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Files the indices for all objects whose ID is in the range defined by <var>pStartId</var> and <var>pEndId</var>.
        ///If <var>pEndId</var> is null then it defaults to <var>pStartId</var>. If <var>pStartId</var> is null then the
        ///range is empty and no filing will occur.
        ///
        ///If <var>lockExtent</var> is true then an extent lock will be acquired before the indices
        ///are built. If the lock cannot be acquired then an error is returned. The lock is released
        ///after the index filing is completed.
        ///
        ///
        ///<p>Returns a <CLASS>%Status</CLASS> value indicating success or failure.
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysSaveIndices(InterSystems.Data.CacheClient.CacheConnection conn, string pStartId, string pEndId, System.Nullable<bool> lockExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pStartId, false);
                    mtdSignature.Add(pEndId, false);
                    mtdSignature.Add(lockExtent, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "%SaveIndices", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method AAGEDisplayToLogical
        /// </summary>
        public static System.Nullable<long> AAGEDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "AAGEDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method AAGEIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus AAGEIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "AAGEIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method AAGELogicalToDisplay
        /// </summary>
        public static string AAGELogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "AAGELogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ABTHDAYDisplayToLogical
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheDate ABTHDAYDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tDate);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "ABTHDAYDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheDateReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ABTHDAYIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus ABTHDAYIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "ABTHDAYIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ABTHDAYLogicalToDisplay
        /// </summary>
        public static string ABTHDAYLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, InterSystems.Data.CacheTypes.CacheDate _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, InterSystems.Data.CacheTypes.ClientTypeId.tDate, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "ABTHDAYLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ACITYDisplayToLogical
        /// </summary>
        public static string ACITYDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "ACITYDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ACITYIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus ACITYIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "ACITYIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ACITYLogicalToDisplay
        /// </summary>
        public static string ACITYLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "ACITYLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ANAMEDisplayToLogical
        /// </summary>
        public static string ANAMEDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "ANAMEDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ANAMEIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus ANAMEIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "ANAMEIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ANAMELogicalToDisplay
        /// </summary>
        public static string ANAMELogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "ANAMELogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method APHHOMEDisplayToLogical
        /// </summary>
        public static string APHHOMEDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "APHHOMEDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method APHHOMEIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus APHHOMEIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "APHHOMEIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method APHHOMELogicalToDisplay
        /// </summary>
        public static string APHHOMELogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "APHHOMELogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method APHOTH1DisplayToLogical
        /// </summary>
        public static string APHOTH1DisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "APHOTH1DisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method APHOTH1IsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus APHOTH1IsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "APHOTH1IsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method APHOTH1LogicalToDisplay
        /// </summary>
        public static string APHOTH1LogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "APHOTH1LogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method APHWORKDisplayToLogical
        /// </summary>
        public static string APHWORKDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "APHWORKDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method APHWORKIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus APHWORKIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "APHWORKIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method APHWORKLogicalToDisplay
        /// </summary>
        public static string APHWORKLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "APHWORKLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ASTATEDisplayToLogical
        /// </summary>
        public static string ASTATEDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "ASTATEDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ASTATEIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus ASTATEIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "ASTATEIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ASTATELogicalToDisplay
        /// </summary>
        public static string ASTATELogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "ASTATELogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ASTREETDisplayToLogical
        /// </summary>
        public static string ASTREETDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "ASTREETDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ASTREETIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus ASTREETIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "ASTREETIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ASTREETLogicalToDisplay
        /// </summary>
        public static string ASTREETLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "ASTREETLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method AZIPDisplayToLogical
        /// </summary>
        public static string AZIPDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "AZIPDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method AZIPIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus AZIPIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "AZIPIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method AZIPLogicalToDisplay
        /// </summary>
        public static string AZIPLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(_argument1, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "AZIPLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DeleteById
        /// </summary>
        public static System.Nullable<bool> DeleteById(InterSystems.Data.CacheClient.CacheConnection conn, string id, ref string errormessage) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(id, false);
                    mtdSignature.Add(errormessage, true);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "DeleteById", mtdSignature);
                    errormessage = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method File
        /// </summary>
        public static System.Nullable<bool> File(InterSystems.Data.CacheClient.CacheConnection conn, InterSystems.Data.CacheTypes.CacheSysList record, System.Nullable<bool> newflag, ref string errormessage, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(record, conn, false);
                    mtdSignature.Add(newflag, false);
                    mtdSignature.Add(errormessage, true);
                    mtdSignature.Add(id, true);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "File", mtdSignature);
                    errormessage = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[3])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// XNAMEインデックス  
        ///  DASL用に定義されていたインデックス
        ///  この構造（$pieceで加工）をCache SQLはインデックスとして採用してくれないので%starswith句に
        ///  名前で条件を使用したクエリ等では、全件走査する。
        ///  この問題解決のためXNAME2インデックスを作成した。
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheSysList GetInstanceById(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tList);
                    mtdSignature.Add(id, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "GetInstanceById", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheSysListReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static User.ADBK IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(User.ADBK));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((User.ADBK)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ListByName
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheSysList ListByName(InterSystems.Data.CacheClient.CacheConnection conn, string name) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tList);
                    mtdSignature.Add(name, false);
                    User.ADBK.RunClassMethodS(conn, User.ADBK.ServerClassName, "ListByName", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheSysListReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of query ByName
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand ByName(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call SQLUser.ADBK_ByName(?)}", conn);
            return cmd;
        }
        
        /// <summary>
        /// <p>This is a system provided query that returns a row for each instance within this extent. The first column of the row is the
        ///object ID. Additional columns can be included in the select list by adding the desired columns to the <parameter>EXTENTQUERYSPEC</parameter> parameter.</p>
        ///<p>
        ///The Extent query default implementation is generated by <class>%Library.ExtentSQLQuery</class>. That class
        ///supports the <var>COMPILEMODE</var> parameter with possible values of IMMEDIATE and DYNAMIC. If DYNAMIC is specified
        ///then the SQL statement used to implement the query will be generated as a dynamic SQL statement. If IMMEDIATE is specified
        ///then the statement is generated as an embedded SQL statement.</p>
        ///<br><p>This query can be overridden by a subclass so long as two requirements are met. The list of columns must include %ID as the first column and
        ///it must return a row corresponding to each instance/row in the extent.</p>
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand Extent(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call SQLUser.ADBK_Extent}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.ADBK Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.ADBK)(conn.OpenProxyObj(User.ADBK.ServerClassName, id, concurrency, typeof(User.ADBK), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.ADBK Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.ADBK)(conn.OpenProxyObj(User.ADBK.ServerClassName, id, typeof(User.ADBK), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.ADBK Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.ADBK)(conn.OpenProxyObj(User.ADBK.ServerClassName, id, typeof(User.ADBK))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.ADBK Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.ADBK)(conn.OpenProxyObj(User.ADBK.ServerClassName, id, concurrency, timeout, typeof(User.ADBK), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.ADBK OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.ADBK)(conn.OpenProxyObj(User.ADBK.ServerClassName, id, concurrency, typeof(User.ADBK), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.ADBK OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.ADBK)(conn.OpenProxyObj(User.ADBK.ServerClassName, id, typeof(User.ADBK), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.ADBK OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.ADBK)(conn.OpenProxyObj(User.ADBK.ServerClassName, id, typeof(User.ADBK))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.ADBK OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.ADBK)(conn.OpenProxyObj(User.ADBK.ServerClassName, id, concurrency, timeout, typeof(User.ADBK), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return User.ADBK.ExistsIdInternal(conn, User.ADBK.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return User.ADBK.DeleteIdInternal(conn, User.ADBK.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return User.ADBK.KillExtentInternal(conn, User.ADBK.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(User.ADBK.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            User.ADBK.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(User.ADBK.ServerClassName);
            if (metaInfo.Validate(User.ADBK.ClassCheckSum, User.ADBK.PropertyInfoColn, User.ADBK.CheckSumMethodDict, User.ADBK.CheckSumQueryDict, User.ADBK.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            User.ADBK.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((User.ADBK.AllPropertiesInfoColn != null)) {
                return User.ADBK.AllPropertiesInfoColn;
            }
            User.ADBK.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(User.ADBK.PropertyInfoColn);
            return User.ADBK.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return User.ADBK.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
